name: hello_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.rrrr)_$(TeamProject)_hello

trigger:
- master

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      vmImage: $(vmImageName)

    
    steps:
    - task: Cache@2
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        path: $(MAVEN_CACHE_FOLDER)
        cacheHitVar: 'CACHE_RESTORED'
      displayName: Cache Maven local repo

  
    
    - task: Maven@4
     # condition: ne(variables.CACHE_RESTORED, 'true')
      inputs:
        mavenPomFile: 'app/pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: false
     
    - task: PublishPipelineArtifact@0
      displayName: 'Publish pipeline artifacts'
      inputs:
        artifactName: 'ccdppathapiservices2'
        targetPath: '$(Build.ArtifactStagingDirectory)'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here

           ls  $(pwd)
          echo $(pwd)
    - script:  echo 'staging release'
    - script: |
        echo "system -DefaultWorkingDirectory - $(system.DefaultWorkingDirectory)"
        echo "build.SourcesDirectory - $(build.SourcesDirectory)"
        echo "Agent.BuildDirectory - $(Agent.BuildDirectory)"
        echo "Build.ArtifactStagingDirectory - $(Build.ArtifactStagingDirectory)"
        echo "Build.Repository.LocalPath - $(Build.Repository.LocalPath)"
        echo "Build.SourcesDirectory - $(Build.SourcesDirectory)"
        echo "Build.BinariesDirectory - $(Build.BinariesDirectory)"
        echo "Agent.WorkFolder - $(Agent.WorkFolder)"
        echo "Pipeline.Workspace - $(Pipeline.Workspace)"
        echo "System.DefaultWorkingDirectory - $(System.DefaultWorkingDirectory)"
        echo "Agent.ToolsDirectory - $(Agent.ToolsDirectory)"
        echo "Agent.TempDirectory - $(Agent.TempDirectory)"
        echo "Agent.HomeDirectory - $(Agent.HomeDirectory)"



- stage: test
  displayName: test stage
  jobs:
 
  - job: last_job
    displayName: last job
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo "finished -all"